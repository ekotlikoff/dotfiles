" Packages sourced as per https://shapeshed.com/vim-packages/
" Specifically, included as a submodule at the vim start package path.

syntax on
filetype plugin indent on

" Show 80 character column
:set colorcolumn=80
set textwidth=80

" Solarized
set t_Co=256
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
set number
set cursorline

" Highlight trailing whitespaces
highlight RedundantSpaces ctermbg=grey guibg=grey
match RedundantSpaces /\s\+$/

" General options
set incsearch
set smartcase
set ignorecase
set gdefault " Global substitutions by default
set showmode
set showmatch
set scrolloff=10 " Guaranteed context lines
set history=200 " Keep 200 lines of command line history
set ruler " Show the cursor position all the time
set showcmd " Display incomplete commands
set ttimeout " Time out for key codes
set ttimeoutlen=100 " Wait up to 100ms after Esc for special key
set display=truncate " Show @@@ in the last line if it is truncated.
" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start
set noswapfile
" Text search
set incsearch
set hlsearch
" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries.
if has('win32')
  set guioptions-=t
endif
if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif
set belloff=all " Turn off sounds

" Mappings (only a few of these to make working on remote hosts with default
" configs easier)
nmap ; :
map Y y$ " make Y consistent with D and C (yank til end)

" Persistent undo
set undofile
set undodir=$HOME/.vim/undo
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

" Buffers
set hidden " Possibility to have more than one unsaved buffers.
set path+=** " Search recursively search through subdirectories

" Vim autocmds
if has("autocmd")
  " Load base template file per extension
  augroup templates
    autocmd BufNewFile *.sh 0r ~/.vim/templates/skeleton.sh | normal G
    autocmd BufNewFile *.py 0r ~/.vim/templates/skeleton.py | normal G
  augroup END
endif

" Tabs
set expandtab
set softtabstop=2
set shiftwidth=2
set tabstop=2
set shiftround
set smarttab
set autoindent
set smartindent

" Configure tabcomplete
set wildmenu

function! CleverTab()
    if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
      return "\<Tab>"
    else
      return "\<C-N>"
    endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>

" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | au! | augroup END"
augroup vimStartup
  au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid, when inside an event handler
  " (happens when dropping a file on gvim) and for a commit message (it's
  " likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

augroup END

augroup Racer
    autocmd!
    autocmd FileType rust nmap <buffer> gd         <Plug>(rust-def)
    autocmd FileType rust nmap <buffer> gs         <Plug>(rust-def-split)
    autocmd FileType rust nmap <buffer> gx         <Plug>(rust-def-vertical)
    autocmd FileType rust nmap <buffer> <leader>gd <Plug>(rust-doc)
    autocmd FileType rust nmap <buffer> <leader>gD <Plug>(rust-doc-tab)
augroup END

" Commands I am getting familiar with
" buffers/splits
"   :e to open a new buffer in the current window
"   :b to open an existing buffer
"   :ls to list existing buffers
"   :sp to split current window into two panes
"   <C-W> + direction to navigate panes
" ma -> 'a to set / go to mark
" <C-r> " to paste unamed register
" Use the above to :vim {search_text} * to search for files containing text
"   Then :copen or :cw to browse the files and open in window or new window
"   or just :ls to view the opened buffers
" ! to execute text in vim against any shell command, e.g. full lines: !!python,
"   !$bash, etc
" "* is the system clipboard register
" ctags - CTRL-] and g CTRL-] can use ctags files to search for tags across
"   languages/file types. It might be worth installing exuberant ctags and
"   configuring it for go in ~/.ctags as per https://go-wise.blogspot.com/2011/09/using-ctags-with-go.html

" Things to read
" https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118
" https://stevelosh.com/blog/2010/09/coming-home-to-vim
" https://github.com/romainl/idiomatic-vimrc
