#!/bin/zsh

set -e

local zet_dir="$HOME/zet/"
local zet_skeleton="# \n\n\t#"
local vim_cmd="vim --cmd 'cd $zet_dir'"
local vim_new_zet_cmd="vim -c 'cd $zet_dir | startinsert!'"

local last_sync_f="$HOME/.last_zet_sync"
local max_sync_delay_seconds=2600

local flag_help flag_new flag_list max_zets_to_list arg_open flag_edit flag_find flag_remove flag_diff flag_status flag_commit
local usage=(
  'zet [-h|--help]'
  'zet [screenshot]'
  '  Create a new zet, optionally with a screenshot'
  'zet [-l|--list] [search_string ...]'
  'zet [-m|--max] [max_zets_to_list ...]'
  'zet [-o|--open] [last|zet ...]'
  '  Where zet is either a dir name or search term'
  'zet <search_string ...>'
  'zet [-e|--edit] <search_string ...>'
  '  Where only the first line of zets are searched'
  'zet [-f|--find] <last|search_string ...>'
  'zet [-rm|--remove] <last|search_string ...>'
  'zet [-d|--diff]'
  'zet [-s|--status]'
  'zet [-c|--commit]'
)

if [[ $# -eq 0 ]]; then
  flag_new=true
fi

zmodload zsh/zutil
zparseopts -D -K -- \
  {h,-help}=flag_help \
  {l,-list}=flag_list \
  {m,-max}:=max_zets_to_list \
  {o,-open}:=arg_open \
  {e,-edit}=flag_edit \
  {f,-find}=flag_find \
  {rm,-remove}=flag_remove \
  {d,-diff}=flag_diff \
  {s,-status}=flag_status \
  {c,-commit}=flag_commit ||
  return 1

[[ -z "$flag_help" ]] || { print -l $usage && return }

if ! [[ -d "$zet_dir" ]]; then
  echo 'where is your zet repo?'
  exit 1
fi

if (( $#max_zets_to_list )); then
  max_zets_to_list=$max_zets_to_list[-1]
else
  max_zets_to_list=20
fi

function commit() {
  if ! [[ -n $(git status --porcelain) ]]; then
    return
  fi
  # Prompt the user and as long as no files are already staged, commit them all
  if read -q 'choice?Commit? '; then
    echo
    if [[ -n $(git diff --name-only --cached) ]]; then
      echo 'cannot commit, there are already staged files'
      exit 1
    fi
    git add -A
    cd $zet_dir
    local count=$(git status --porcelain | wc -l)
    if ! [ -z "$1" ]; then
      git commit -m "$1"
    elif (( $count > 3 )); then
      git commit
    else
      local modified_dirs=$(git status --porcelain | sed s/^...// | xargs dirname)
      local commit_title
      for dir (${(f)modified_dirs}); do
        commit_title+="$(head -n 1 $dir/README.md | sed "s/\# //"), "
      done
      commit_title="${commit_title:0:-2}"
      git commit -m "$commit_title"
    fi
    git push
  fi
}

function sync() {
  # If we haven't ran this for >= max_sync_delay_seconds (or if this is the first time) then run git pull
  if [[ ! -f "$last_sync_f" || $(find "$last_sync_f" -mtime +"${max_sync_delay_seconds}"s -print) ]]; then
    git pull --quiet
  fi

  touch "$last_sync_f"
}

cd $zet_dir
sync

if [[ $flag_new ]]; then
  # New zet
  local zet="$zet_dir/$(date +'%m%d%Y%I%M%S')"
  if [[ -d $zet ]]; then
    echo 'zet already exists'
    exit 1
  fi
  mkdir "$zet"
  if [[ "$@" == screenshot ]]; then
    # TODO zet screenshot
    # TODO Instruct user to take a screenshot to ~/Pictures/
    # TODO take latest picture there, add it to zet
    # TODO write README.md template with link to picture
    echo 'zet screenshot'
    exit
  fi
  echo "$zet_skeleton" > "$zet/README.md"
  zsh -c "$vim_new_zet_cmd $zet/README.md"
  commit "$dir"

elif [[ $flag_list ]]; then
  local search_string="$@[-1]"
  local title='title="$(head -n 1 {}/README.md | sed "s/\# //")";'
  local tags='tags="$(tail -n 1 {}/README.md | grep "\t#" | sed "s/^\t//")";'
  local p='printf "  %s %-50b %s\n" "{}" "\033[1m$title\033[0m" "$tags"'
  if [[ -z "$search_string" ]]; then
    if [[ $flag_edit || $flag_find ]]; then
      local directories=$(ls -1t | head "-$max_zets_to_list")
      local files=$(echo $directories | sed 's/$/\/README.md/' | tr '\n' ' ')
      zsh -c "$vim_cmd $(echo $files)"
    else
      ls -1t | head "-$max_zets_to_list" |
        xargs -I{} zsh -c "${title} ${tags} ${p}"
    fi
  else
    if [[ $flag_edit || $flag_find ]]; then
      local directories=$(ls -1t | xargs grep -irl "$search_string" | head "-$max_zets_to_list" | sed 's/\/.*//')
      if [ -z $directories ]; then
        echo "No zets found with: $search_string"
        exit 1
      fi
      local files=$(echo $directories | sed 's/$/\/README.md/' | tr '\n' ' ')
      zsh -c "$vim_cmd $(echo $files)"
    else
      ls -1t | xargs grep -ilr "$search_string" | head "-$max_zets_to_list" | cut -d/ -f1 | xargs -I{} zsh -c "${title} ${tags} ${p}"
    fi
  fi

elif (( $#arg_open )); then
  open_arg=$arg_open[-1]
  if [[ $open_arg == 'last' ]]; then
    most_recent=$(ls -t | head -1)
    o "$most_recent/README.md"
  else
    if [ -d "$open_arg" ]; then
      o "$open_arg"
    else
      local search_string="$open_arg"
      local match=$(ls -1t | xargs grep -irl "$search_string" | head -1)
      if ! [ -z "$match" ]; then
        o "$match"
      else
        echo "No match"
        exit 0
      fi
    fi
  fi

elif [[ $flag_find ]]; then
  local edit_arg="$@[-1]"
  local zet=''
  local most_recent_match=$(ls -t | xargs grep -irl "$edit_arg" | sed 's/\/.*//' | head -1)
  if [ -z $most_recent_match ]; then
    echo "No zets found with: $edit_arg"
    exit 1
  fi
  cd $most_recent_match
  zsh -c "$vim_cmd README.md"
  zet="$zet_dir/$most_recent_match"

elif [[ $flag_remove ]]; then
  local remove_arg="$@[-1]"
  local zet=''
  if [[ "$remove_arg" == 'last' || -z "$remove_arg" ]]; then
    local zet=$zet_dir/$(ls -t | head -1)
  else
    for dir in $zet_dir/*; do head -n1 $dir/README.md | grep -iq "$remove_arg" && zet=$dir; done
    if [ -z $zet ]; then
      echo "No zets found with: $remove_arg"
      exit 1
    fi
  fi
  local title="$(head -n 1 $zet/README.md | sed "s/\# //")"
  if [[ -z "$title" ]]; then
    title="$zet"
  fi
  read -q "REPLY?Removing '$title', are you sure? [y/n] "
  echo
  if [[ "$REPLY" == 'y' || "$REPLY" == 'Y' ]]; then
    cd "$zet_dir"
    rm -rf "$zet"
    commit "$title"
  fi

elif [[ $flag_diff ]]; then
  cd "$zet_dir"
  git diff

elif [[ $flag_status ]]; then
  cd "$zet_dir"
  git status

elif [[ $flag_commit ]]; then
  cd "$zet_dir"
  commit

else
  # Default to edit
  local edit_arg="$@[-1]"
  local zet=''
  if [[ $edit_arg == 'last' ]]; then
    local most_recent=$(ls -t | head -1)
    cd $most_recent
    zsh -c "$vim_cmd README.md"
    zet="$zet_dir/$most_recent"
  else
    for dir in $zet_dir/*; do head -n1 $dir/README.md | grep -iq "$edit_arg" && zet=$dir; done
    if [ -z $zet ]; then
      echo "No zets found with: $edit_arg"
      exit 1
    fi
    cd "$zet"
    zsh -c "$vim_cmd README.md"
  fi
fi
