#!/bin/zsh

local zet_dir="$HOME/zet/"
local zet_skeleton="# \n\n\t#"

local flag_help flag_list arg_open arg_edit
local usage=(
	'zet [-h|--help]'
	'zet [-l|--list] [search_string...]'
	'zet [-o|--open] [last|zet...]'
	'zet [-e|--edit] <last|search_string...>'
	'zet [screenshot]'
)

zmodload zsh/zutil
zparseopts -D -F -K -- \
	{h,-help}=flag_help \
	{l,-list}=flag_list \
	{o,-open}:=arg_open \
	{e,-edit}:=arg_edit ||
	return 1

[[ -z "$flag_help" ]] || { print -l $usage && return }

if ! [[ -d "$zet_dir" ]]; then
	echo 'where is your zet repo?'
	exit 1
fi

function commit() {
	# Takes zet directory, prompts user then sets commit message based on zet title and pushes
	local dir="$@"
	if read -q 'choice?Commit? '; then
		if [[ -n $(git diff --name-only --cached) ]]; then
			echo 'cannot commit, there are already staged files'
			exit 1
		fi
		commit_title=$(cat "$dir/README.md" | head -1 | sed 's/\# //')
		git add "$dir"
		git commit -m "$commit_title"
		git push
	fi
}

cd $zet_dir

if [[ $flag_list ]]; then
	# TODO list should include the title of each zet in the second column
	local search_string="$@[-1]"
	if [[ -z "$search_string" ]]; then
		ls -1rt
	else
		ls -rt | xargs grep -rl "$search_string" | sed 's/\/.*//'
	fi

elif (( $#arg_open )); then
	open_arg=$arg_open[-1]
	if [[ $open_arg == 'last' ]]; then
		most_recent=$(ls -t | head -1)
		o "$most_recent"
	else
		o "$open_arg"
	fi

elif (( $#arg_edit )); then
	edit_arg=$arg_edit[-1]
	local dir=''
	if [[ $edit_arg == 'last' ]]; then
		local most_recent=$(ls -t | head -1)
		cd $most_recent
		${EDITOR:-vi} README.md
		dir="$zet_dir/$most_recent"
	else
		local most_recent_match=$(ls -t | xargs grep -rl "$edit_arg" | sed 's/\/.*//' | head -1)
		cd $most_recent_match
		${EDITOR:-vi} README.md
		dir="$zet_dir/$most_recent_match"
	fi
	commit "$dir"

elif (( $#@ )); then
	echo "unexpected arg $@"
	exit 1
else
	# New zet
	local dir="$zet_dir/$(date +'%m%d%Y%I%M%S')"
	if [[ -d $dir ]]; then
		echo 'zet already exists'
		exit 1
	fi
	mkdir "$dir"
	if [[ "$@" == screenshot ]]; then
		# TODO zet screenshot
		# TODO Instruct user to take a screenshot to ~/Pictures/
		# TODO take latest picture there, add it to zet
		# TODO write README.md template with link to picture
		echo 'zet screenshot'
		exit
	fi
	echo "$zet_skeleton" > "$dir/README.md"
	${EDITOR:-vi} -c 'startinsert!' "$dir/README.md"
	commit "$dir"
fi
